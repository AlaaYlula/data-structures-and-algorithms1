/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Challenge;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    //Can successfully instantiate an empty linked list
    @Test void EmptyLinked(){
        LinkedList<Integer> testList = new LinkedList();
        assertTrue(testList.head == null);
    }
    //Can properly insert into the linked list
    @Test void InsertTest(){
        LinkedList<Integer> testList = new LinkedList();
        testList.AddToHead(6);
        assertTrue(testList.VlaueExist(6)==true);
    }
    //The head property will properly point to the first node in the linked list
    @Test void TestHeadPointer(){
        LinkedList<Integer> testList = new LinkedList();
        testList.AddToHead(6);
        testList.AddToHead(8);
        assertTrue(testList.head.value == (Integer)8);
    }
    //Can properly insert multiple nodes into the linked list
    @Test void MultipleInsertTest(){
        LinkedList<Integer> testList = new LinkedList();
        testList.AddToHead(6);
        testList.AddToHead(8);
        testList.AddToHead(10);

        assertTrue(testList.VlaueExist(6)==true && testList.VlaueExist(8)==true && testList.VlaueExist(10)==true  );
    }
    //Will return true when finding a value within the linked list that exists
    @Test void FindValueTest(){
        LinkedList<Integer> testList = new LinkedList();
        testList.AddToHead(6);
        testList.AddToHead(10);

        assertTrue(testList.VlaueExist(6)==true);
    }
    //Will return false when searching for a value in the linked list that does not exist
    @Test void NotFindTest(){
        LinkedList<Integer> testList = new LinkedList();
        testList.AddToHead(6);
        testList.AddToHead(10);

        assertTrue(testList.VlaueExist(11)==false);
    }
    //Can properly return a collection of all the values that exist in the linked list
    @Test void PrintAllTest(){
        LinkedList<Integer> testList = new LinkedList();
        testList.AddToHead(6);
        testList.AddToHead(7);
        testList.AddToHead(8);

        assertTrue(testList.ToString().equals("{ 8 } -> { 7 } -> { 6 } -> NULL"));
    }
}
